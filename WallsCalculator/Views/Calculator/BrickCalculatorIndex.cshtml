@using WallsCalculator.Models.Enums
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model WallsCalculator.Models.BrickCalculationInput

@{
    ViewData["Title"] = "Кирпичная стена";
}

<div>
    <a asp-controller="Home" asp-action="Index">Назад</a>
</div>

<div class="font-weight-bold h3 text-center my-5 text-secondary">
    <span>Расчет кирпичных стен</span>
</div>

<div>
    <form asp-controller="Calculator" asp-action="BrickCalculatorIndex">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <div class="row">
            <div class="col-md">
                <button type="submit" class="btn btn-primary">
                    Расчитать
                </button>
                <hr/>
                <div class="form-group">
                    <label asp-for="BrickType" class="control-label"></label>
                    <select class="form-control" asp-for="BrickType" asp-items="Html.GetEnumSelectList<BrickType>()">
                    </select>
                    <span asp-validation-for="BrickType" class="text-danger"></span>
                    <img class="brickTypeImg" src="~/img/standartnyj-razmer-krasnogo-kirpicha_2.jpg"/>
                </div>
                <div class="form-group">
                    <label asp-for="MasonryType" class="control-label"></label>
                    <select class="form-control" asp-for="MasonryType" asp-items="Html.GetEnumSelectList<MasonryType>()">
                    </select>
                    <span asp-validation-for="MasonryType" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Perimeter" class="control-label"></label>
                    <input onkeypress="isNumber(event)" asp-for="Perimeter" class="form-control" placeholder="0 мм"/>
                    <span asp-validation-for="Perimeter" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="AngleHeight" class="control-label"></label>
                    <input onkeypress="isNumber(event)" asp-for="AngleHeight" class="form-control" placeholder="0 мм"/>
                    <span asp-validation-for="AngleHeight" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="DepthType" class="control-label"></label>
                    <select class="form-control" asp-for="DepthType" asp-items="Html.GetEnumSelectList<DepthType>()">
                    </select>
                    <span asp-validation-for="DepthType" class="text-danger"></span>
                    <img class="brickTypeImg" src="~/img/bricks_11.png"/>
                </div>
                <div class="form-group">
                    <label asp-for="Price" class="control-label"></label>
                    <input onkeypress="isNumber(event)" asp-for="Price" class="form-control" placeholder="0 руб."/>
                    <span asp-validation-for="Price" class="text-danger"></span>
                </div>
            </div>
            <div id="apertures-container" class="col-md">
                <button type="button" class="btn btn-primary" onclick="addApertureInput('#apertures-container', 'aperture')">
                    Добавить проем
                </button>
                @{
                    await Html.RenderPartialAsync("ApertureIndex", Model?.Apertures);
                }
            </div>
            <div id="workers-container" class="col-md">
                <button type="button" class="btn btn-primary" onclick="addApertureInput('#workers-container', 'worker')">
                    Добавить рабочего
                </button>
                @{
                    await Html.RenderPartialAsync("WorkersIndex", Model?.Workers);
                }
            </div>
        </div>
    </form>

    <div>
        @{
            if (ViewBag.IsCalculated != null)
            {
                if (ViewBag.IsCalculated)
                {
                    await Html.RenderPartialAsync("BrickCalculationOutputPartial", ViewData["Result"]);
                }
                else
                {
                    <h2>Во время расчета произошла ошибка, попробуйте переввести параметры.</h2>
                }
            }
        }
    </div>
</div>

<div class="brickCalculator">
    <span class="font-weight-bold h3 text-center my-5 text-secondary text-center">Общие сведения по результатам расчетов</span>
    <pre class="my-3">
Периметр строения
    - Общая длина всех стен учтенных в расчетах.

Общая площадь кладки
    - Площадь внешней стороны стен. Соответствует площади необходимого утеплителя, если такой предусмотрен проектом.

Толщина стены
    - Толщина готовой стены с учетом толщины растворного шва. Может незначительно отличаться от конечного результата в 
      зависимости от вида кладки.

Количество
    - Общее количество кирпичей необходимых для постройки стен по заданным параметрам
    </pre>
</div>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}